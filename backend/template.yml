AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  obstacle-api

Globals:
  Function:
    Timeout: 300
    Runtime: provided.al2
    Handler: bootstrap
    Architectures:
      - !Sub "${Architectures}"
    Environment:
      Variables:
        ENV: !Sub "${ENV}"
        OBSTACLE_TABLE_NAME: !Ref ObstacleTable
        OBSTACLE_IMAGE_BUCKET_NAME: !Ref ObstacleImageBucket
        SHELTER_TABLE_NAME: !Ref ShelterTable
  Api:
    OpenApiVersion: 3.0.2

Parameters:
  ENV:
    Type: String
    AllowedValues:
      - dev # 開発環境
      - prd # 本番環境
    Default: dev
  Architectures:
    Type: String
    Default: arm64

Resources:
  # Role
  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ENV}-obstacle-api-execution-role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${ENV}-obstacle-api-execution-role-policy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - Fn::Sub: ${ObstacleFunction.Arn}
                  - Fn::Sub: ${ShelterFunction.Arn}
  FunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ENV}-obstacle-function-execution-role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub "${ENV}-obstacle-function-execution-role-policy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource:
                  - !GetAtt ObstacleTable.Arn
                  - !GetAtt ShelterTable.Arn
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource: !Sub "arn:aws:s3:::${ENV}-obstacle-image-bucket/*"

  # API Gateway
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${ENV}-obstacle-api"
      StageName: api
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./openapi.yaml # 参照するyamlファイルを指定
      Cors:
        AllowOrigin: "'*'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"

  # DynamoDB Tables
  ObstacleTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ENV}-obstacle-table"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: N
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  ShelterTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ENV}-shelter-table"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: N
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # Lambda
  ObstacleFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ENV}-osrm-ObstacleFunction"
      Role: !GetAtt FunctionRole.Arn
    Metadata:
      BuildMethod: makefile

  ShelterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ENV}-osrm-ShelterFunction"
      Role: !GetAtt FunctionRole.Arn
    Metadata:
      BuildMethod: makefile

  ObstacleImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ENV}-obstacle-image-bucket"
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
            MaxAge: 3000
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: false # ← これが重要
        RestrictPublicBuckets: false

  ObstacleImageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ObstacleImageBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${ENV}-obstacle-image-bucket/*"

Outputs:
  ObstacleAPI:
    Description: "API Gateway endpoint URL for Obstacle API"
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/api/obstacles"
  ShelterAPI:
    Description: "API Gateway endpoint URL for Shelter API"
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/api/shelters"
  ObstacleFunction:
    Description: "ObstacleFunction ARN"
    Value: !GetAtt ObstacleFunction.Arn
  ShelterFunction:
    Description: "ShelterFunction ARN"
    Value: !GetAtt ShelterFunction.Arn
