// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// CreateShelter defines model for CreateShelter.
type CreateShelter struct {
	Height float32 `json:"height"`
	Lat    float32 `json:"lat"`
	Lng    float32 `json:"lng"`
	Name   string  `json:"name"`
}

// Empty defines model for Empty.
type Empty = map[string]interface{}

// Error defines model for Error.
type Error struct {
	Errors     *map[string][]string `json:"errors,omitempty"`
	Message    string               `json:"message"`
	StatusCode int                  `json:"status_code"`
}

// ListShelterResponse defines model for ListShelterResponse.
type ListShelterResponse struct {
	Items *[]Shelter `json:"items,omitempty"`
}

// Shelter defines model for Shelter.
type Shelter struct {
	Height float32 `json:"height"`
	Id     string  `json:"id"`
	Lat    float32 `json:"lat"`
	Lng    float32 `json:"lng"`
	Name   string  `json:"name"`
}

// UpdateShelter defines model for UpdateShelter.
type UpdateShelter struct {
	Height float32 `json:"height"`
	Lat    float32 `json:"lat"`
	Lng    float32 `json:"lng"`
	Name   string  `json:"name"`
}

// PostSheltersJSONRequestBody defines body for PostShelters for application/json ContentType.
type PostSheltersJSONRequestBody = Shelter

// PutSheltersIdJSONRequestBody defines body for PutSheltersId for application/json ContentType.
type PutSheltersIdJSONRequestBody = Shelter

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all shelters
	// (GET /shelters)
	GetShelters(w http.ResponseWriter, r *http.Request)
	// Create a shelter
	// (POST /shelters)
	PostShelters(w http.ResponseWriter, r *http.Request)
	// Delete a shelter
	// (DELETE /shelters/{id})
	DeleteSheltersId(w http.ResponseWriter, r *http.Request, id string)
	// Get a shelter by ID
	// (GET /shelters/{id})
	GetSheltersId(w http.ResponseWriter, r *http.Request, id string)
	// Update a shelter
	// (PUT /shelters/{id})
	PutSheltersId(w http.ResponseWriter, r *http.Request, id string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get all shelters
// (GET /shelters)
func (_ Unimplemented) GetShelters(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a shelter
// (POST /shelters)
func (_ Unimplemented) PostShelters(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a shelter
// (DELETE /shelters/{id})
func (_ Unimplemented) DeleteSheltersId(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a shelter by ID
// (GET /shelters/{id})
func (_ Unimplemented) GetSheltersId(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a shelter
// (PUT /shelters/{id})
func (_ Unimplemented) PutSheltersId(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetShelters operation middleware
func (siw *ServerInterfaceWrapper) GetShelters(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetShelters(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostShelters operation middleware
func (siw *ServerInterfaceWrapper) PostShelters(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostShelters(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSheltersId operation middleware
func (siw *ServerInterfaceWrapper) DeleteSheltersId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSheltersId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSheltersId operation middleware
func (siw *ServerInterfaceWrapper) GetSheltersId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSheltersId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutSheltersId operation middleware
func (siw *ServerInterfaceWrapper) PutSheltersId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutSheltersId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/shelters", wrapper.GetShelters)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/shelters", wrapper.PostShelters)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/shelters/{id}", wrapper.DeleteSheltersId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/shelters/{id}", wrapper.GetSheltersId)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/shelters/{id}", wrapper.PutSheltersId)
	})

	return r
}

type GetSheltersRequestObject struct {
}

type GetSheltersResponseObject interface {
	VisitGetSheltersResponse(w http.ResponseWriter) error
}

type GetShelters200JSONResponse ListShelterResponse

func (response GetShelters200JSONResponse) VisitGetSheltersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSheltersdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetSheltersdefaultJSONResponse) VisitGetSheltersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostSheltersRequestObject struct {
	Body *PostSheltersJSONRequestBody
}

type PostSheltersResponseObject interface {
	VisitPostSheltersResponse(w http.ResponseWriter) error
}

type PostShelters201JSONResponse Shelter

func (response PostShelters201JSONResponse) VisitPostSheltersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostSheltersdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PostSheltersdefaultJSONResponse) VisitPostSheltersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteSheltersIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteSheltersIdResponseObject interface {
	VisitDeleteSheltersIdResponse(w http.ResponseWriter) error
}

type DeleteSheltersId204JSONResponse Empty

func (response DeleteSheltersId204JSONResponse) VisitDeleteSheltersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(204)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSheltersIddefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteSheltersIddefaultJSONResponse) VisitDeleteSheltersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSheltersIdRequestObject struct {
	Id string `json:"id"`
}

type GetSheltersIdResponseObject interface {
	VisitGetSheltersIdResponse(w http.ResponseWriter) error
}

type GetSheltersId200JSONResponse Shelter

func (response GetSheltersId200JSONResponse) VisitGetSheltersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSheltersIddefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetSheltersIddefaultJSONResponse) VisitGetSheltersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutSheltersIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutSheltersIdJSONRequestBody
}

type PutSheltersIdResponseObject interface {
	VisitPutSheltersIdResponse(w http.ResponseWriter) error
}

type PutSheltersId200JSONResponse Shelter

func (response PutSheltersId200JSONResponse) VisitPutSheltersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutSheltersIddefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PutSheltersIddefaultJSONResponse) VisitPutSheltersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all shelters
	// (GET /shelters)
	GetShelters(ctx context.Context, request GetSheltersRequestObject) (GetSheltersResponseObject, error)
	// Create a shelter
	// (POST /shelters)
	PostShelters(ctx context.Context, request PostSheltersRequestObject) (PostSheltersResponseObject, error)
	// Delete a shelter
	// (DELETE /shelters/{id})
	DeleteSheltersId(ctx context.Context, request DeleteSheltersIdRequestObject) (DeleteSheltersIdResponseObject, error)
	// Get a shelter by ID
	// (GET /shelters/{id})
	GetSheltersId(ctx context.Context, request GetSheltersIdRequestObject) (GetSheltersIdResponseObject, error)
	// Update a shelter
	// (PUT /shelters/{id})
	PutSheltersId(ctx context.Context, request PutSheltersIdRequestObject) (PutSheltersIdResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetShelters operation middleware
func (sh *strictHandler) GetShelters(w http.ResponseWriter, r *http.Request) {
	var request GetSheltersRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetShelters(ctx, request.(GetSheltersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetShelters")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSheltersResponseObject); ok {
		if err := validResponse.VisitGetSheltersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostShelters operation middleware
func (sh *strictHandler) PostShelters(w http.ResponseWriter, r *http.Request) {
	var request PostSheltersRequestObject

	var body PostSheltersJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostShelters(ctx, request.(PostSheltersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostShelters")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostSheltersResponseObject); ok {
		if err := validResponse.VisitPostSheltersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteSheltersId operation middleware
func (sh *strictHandler) DeleteSheltersId(w http.ResponseWriter, r *http.Request, id string) {
	var request DeleteSheltersIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSheltersId(ctx, request.(DeleteSheltersIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSheltersId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteSheltersIdResponseObject); ok {
		if err := validResponse.VisitDeleteSheltersIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSheltersId operation middleware
func (sh *strictHandler) GetSheltersId(w http.ResponseWriter, r *http.Request, id string) {
	var request GetSheltersIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSheltersId(ctx, request.(GetSheltersIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSheltersId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSheltersIdResponseObject); ok {
		if err := validResponse.VisitGetSheltersIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutSheltersId operation middleware
func (sh *strictHandler) PutSheltersId(w http.ResponseWriter, r *http.Request, id string) {
	var request PutSheltersIdRequestObject

	request.Id = id

	var body PutSheltersIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutSheltersId(ctx, request.(PutSheltersIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutSheltersId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutSheltersIdResponseObject); ok {
		if err := validResponse.VisitPutSheltersIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWwY7TMBD9lWjgGDVZ4JQbsAhV4lCBOK1WyI2nqVeJ7bUnSFGVf0e2mzTZGK1A3VJO",
	"63rs8Xvz3kz2AKVqtJIoyUJxAFvusWF++dEgI/y2x5rQuA1tlEZDAn14j6Lak1tRpxEKkG2zRQN9CjX7",
	"zb6sovuSNTgJWDJCVtD3KRh8bIVBDsVdOBWSh1TpgOE+Ha6q7QOW5HJ+ajR1k6STiDEqwgfdtl8xzgUJ",
	"JVm9mZ0QhI2N4BxfZ8awbvL79GaD1rIKo5ctMWrtj1LxaVxIwsqV50kVpqdPeWMV+CIsHdX7ilYraXHJ",
	"euQ0Ll4b3EEBr7KTMbKjK7LBDAvKMc5/4xzBoyV6GUMJDukfuuq75v9tT7i7Qu6UzyqodrEjk+T9Zg0p",
	"/ERjhZJQwM0qX+UOhtIomRZQwNvVzSqHFDSjvSeb2XDZ/6jQ03PFYK531hwK+IyDAS043MGE/vybPHd/",
	"SiUJpb/KtK5F6S9nD9ahGKbRc66MGd2z5WhLIzQFTu5YonbJCNuf2LG2prNBCbMl8rgPJBN4Kdi2aZjp",
	"Qp0SVtczZFrZSEU3ys5L+tiipQ+Kd2ejMPb43GtkWuwXIt68zLPz2oUPEb8evQKghA2C+fDYDtlB8N49",
	"zLFGwqWIt35/kHHNfVMZ1mBoprsDCAfBNdowoIowrOZypBOST8fE/UKqd+crmv+0RooWiF2RUAHQVKj0",
	"2Ul1KT3yS7TOMN93qpX8ygbeIEqy7ZL1rZ95bWzktZeQ5h/P0YuYIfzzckU2CIBmc7TvfwUAAP//MH2m",
	"JpIMAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
