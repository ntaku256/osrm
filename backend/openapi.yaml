openapi: 3.0.0
info:
  title: Obstacle and Shelter API
  description: API for managing obstacle and shelter data
  version: 1.0.0
tags:
  - name: Obstacle
  - name: Valhalla
  - name: Shelter
  - name: User
  - name: WalkedRoute

paths:
  /obstacles:
    get:
      summary: Get all obstacles
      tags:
        - Obstacle
      responses:
        "200":
          description: List of obstacles
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListObstacleResponse"
        default:
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration:
        credentials:
          Fn::Sub: ${ApiRole.Arn}
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ObstacleFunction.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
    post:
      summary: Create an obstacle
      tags:
        - Obstacle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateObstacleRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Obstacle"
        default:
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration:
        credentials:
          Fn::Sub: ${ApiRole.Arn}
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ObstacleFunction.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
      security:
        - firebase: []
  /obstacles/{id}:
    get:
      summary: Get an obstacle by ID
      tags:
        - Obstacle
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Obstacle found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Obstacle"
        default:
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration:
        credentials:
          Fn::Sub: ${ApiRole.Arn}
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ObstacleFunction.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
    put:
      summary: Update an obstacle
      tags:
        - Obstacle
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateObstacleRequest"
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Obstacle"
        default:
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration:
        credentials:
          Fn::Sub: ${ApiRole.Arn}
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ObstacleFunction.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
      security:
        - firebase: []
    delete:
      summary: Delete an obstacle
      tags:
        - Obstacle
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
        default:
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration:
        credentials:
          Fn::Sub: ${ApiRole.Arn}
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ObstacleFunction.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
      security:
        - firebase: []
  /obstacles/{id}/image-upload:
    post:
      summary: Generate presigned URL for image upload
      tags:
        - Obstacle
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filename:
                  type: string
      responses:
        "200":
          description: Presigned URL
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                  image_s3_key:
                    type: string
        default:
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration:
        credentials:
          Fn::Sub: ${ApiRole.Arn}
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ObstacleFunction.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
      security:
        - firebase: []
    options:
      summary: CORS support
      tags:
        - Obstacle
      responses:
        "200":
          description: CORS support
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          "200":
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}"
  /obstacles/{id}/image:
    put:
      summary: Save image_s3_key to obstacle
      tags:
        - Obstacle
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                image_s3_key:
                  type: string
      responses:
        "200":
          description: Updated obstacle
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Obstacle"
        default:
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration:
        credentials:
          Fn::Sub: ${ApiRole.Arn}
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ObstacleFunction.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
      security:
        - firebase: []
    options:
      summary: CORS support
      tags:
        - Obstacle
      responses:
        "200":
          description: CORS support
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          "200":
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}"
  /route-with-obstacles:
    post:
      summary: Get route from Valhalla with obstacles information
      tags:
        - Valhalla
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RouteWithObstaclesRequest"
      responses:
        "200":
          description: Route with obstacles
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValhallaRouteResponse"
        default:
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration:
        credentials:
          Fn::Sub: ${ApiRole.Arn}
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ObstacleFunction.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
    options:
      summary: CORS support
      tags:
        - Valhalla
      responses:
        "200":
          description: CORS support
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          "200":
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}"
  /locate:
    post:
      summary: Get nearest road information from Valhalla locate endpoint
      tags:
        - Valhalla
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                locations:
                  type: array
                  items:
                    type: object
                    properties:
                      lat:
                        type: number
                      lon:
                        type: number
                    required:
                      - lat
                      - lon
                  minItems: 1
                costing:
                  type: string
                  default: "pedestrian"
              required:
                - locations
      responses:
        "200":
          description: Nearest road information
          content:
            application/json:
              schema:
                type: object
                description: "Valhalla locate response (structure varies)"
        default:
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration:
        credentials:
          Fn::Sub: ${ApiRole.Arn}
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ObstacleFunction.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
    options:
      summary: CORS support
      tags:
        - Valhalla
      responses:
        "200":
          description: CORS support
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          "200":
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}"
  /trace_attributes:
    post:
      summary: Get trace attributes from Valhalla
      tags:
        - Valhalla
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: "Valhalla trace_attributes request body"
      responses:
        "200":
          description: Trace attributes response
          content:
            application/json:
              schema:
                type: object
                description: "Valhalla trace_attributes response"
        default:
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration:
        credentials:
          Fn::Sub: ${ApiRole.Arn}
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ObstacleFunction.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
    options:
      summary: CORS support
      tags:
        - Valhalla
      responses:
        "200":
          description: CORS support
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          "200":
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}"
  /trace_route:
    post:
      summary: Get trace route from Valhalla
      tags:
        - Valhalla
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: "Valhalla trace_route request body"
      responses:
        "200":
          description: Trace route response
          content:
            application/json:
              schema:
                type: object
                description: "Valhalla trace_route response"
        default:
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration:
        credentials:
          Fn::Sub: ${ApiRole.Arn}
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ObstacleFunction.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
    options:
      summary: CORS support
      tags:
        - Valhalla
      responses:
        "200":
          description: CORS support
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          "200":
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}"
  /isochrone:
    post:
      summary: Get isochrone from Valhalla
      tags:
        - Valhalla
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: "Valhalla isochrone request body"
      responses:
        "200":
          description: Isochrone response
          content:
            application/json:
              schema:
                type: object
                description: "Valhalla isochrone response"
        default:
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration:
        credentials:
          Fn::Sub: ${ApiRole.Arn}
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ObstacleFunction.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
    options:
      summary: CORS support
      tags:
        - Valhalla
      responses:
        "200":
          description: CORS support
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          "200":
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}"
  /shelters:
    get:
      summary: Get all shelters
      tags:
        - Shelter
      responses:
        "200":
          description: List of shelters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListShelterResponse"
        default:
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration:
        credentials:
          Fn::Sub: ${ApiRole.Arn}
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ShelterFunction.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
    post:
      summary: Create a shelter
      tags:
        - Shelter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateShelterRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Shelter"
        default:
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration:
        credentials:
          Fn::Sub: ${ApiRole.Arn}
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ShelterFunction.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
      security:
        - firebase: []
    options:
      summary: CORS support
      tags:
        - Shelter
      responses:
        "200":
          description: CORS support
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          "200":
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}"
  /shelters/{id}:
    get:
      summary: Get a shelter by ID
      tags:
        - Shelter
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Shelter found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Shelter"
        default:
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration:
        credentials:
          Fn::Sub: ${ApiRole.Arn}
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ShelterFunction.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
    put:
      summary: Update a shelter
      tags:
        - Shelter
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateShelterRequest"
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Shelter"
        default:
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration:
        credentials:
          Fn::Sub: ${ApiRole.Arn}
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ShelterFunction.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
      security:
        - firebase: []
    delete:
      summary: Delete a shelter
      tags:
        - Shelter
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
        default:
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration:
        credentials:
          Fn::Sub: ${ApiRole.Arn}
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ShelterFunction.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
      security:
        - firebase: []
    options:
      summary: CORS support
      tags:
        - Shelter
      responses:
        "200":
          description: CORS support
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          "200":
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}"
  /users:
    post:
      summary: Create/Register a new user
      tags:
        - User
      security:
        - firebase: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration:
        credentials:
          Fn::Sub: ${ApiRole.Arn}
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserFunction.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
    options:
      summary: CORS support
      tags:
        - User
      responses:
        "200":
          description: CORS support
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          "200":
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET,PUT,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}"
  /users/me:
    get:
      summary: Get current user profile
      tags:
        - User
      security:
        - firebase: []
      responses:
        "200":
          description: User profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration:
        credentials:
          Fn::Sub: ${ApiRole.Arn}
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserFunction.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
    put:
      summary: Update current user profile
      tags:
        - User
      security:
        - firebase: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration:
        credentials:
          Fn::Sub: ${ApiRole.Arn}
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserFunction.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
    delete:
      summary: Delete current user
      tags:
        - User
      security:
        - firebase: []
      responses:
        "200":
          description: User deleted successfully
        default:
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration:
        credentials:
          Fn::Sub: ${ApiRole.Arn}
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserFunction.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
    options:
      summary: CORS support
      tags:
        - User
      responses:
        "200":
          description: CORS support
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          "200":
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}"
  /walked_routes:
    post:
      summary: "GPS記録ルートの保存"
      tags:
        - WalkedRoute
      security:
        - firebase: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                trace_points:
                  type: array
                  items:
                    type: array
                    items:
                      type: number
                  minItems: 2
                start_time:
                  type: string
                  format: date-time
                end_time:
                  type: string
                  format: date-time
                title:
                  type: string
              required: [trace_points, start_time, end_time]
      responses:
        "201":
          description: "保存成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WalkedRoute"
      x-amazon-apigateway-integration:
        credentials:
          Fn::Sub: ${ApiRole.Arn}
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalkedRouteFunction.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
    options:
      summary: CORS support
      tags:
        - WalkedRoute
      responses:
        "200":
          description: CORS support
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          "200":
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}"
components:
  schemas:
    Error:
      type: object
      properties:
        status_code:
          type: integer
        message:
          type: string
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
      required:
        - status_code
        - message
    ObstacleType:
      type: integer
      enum: [0, 1, 2, 3, 4, 5]
      description: |
        Enum representing different types of obstacles:
        * 0 - BLOCK_WALL
        * 1 - VENDING_MACHINE
        * 2 - STAIRS
        * 3 - STEEP_SLOPES
        * 4 - NARROW_ROADS
        * 5 - OTHER
    DangerLevel:
      type: integer
      enum: [0, 1, 2]
      description: |
        Enum representing different danger levels:
        * 0 - LOW
        * 1 - MEDIUM
        * 2 - HIGH
    Obstacle:
      type: object
      properties:
        id:
          type: integer
        position:
          type: array
          items:
            type: number
          description: "[latitude, longitude]"
          minItems: 2
          maxItems: 2
        type:
          $ref: "#/components/schemas/ObstacleType"
        description:
          type: string
        dangerLevel:
          $ref: "#/components/schemas/DangerLevel"
        nodes:
          type: array
          items:
            type: number
          description: "[latitude, longitude]"
          minItems: 2
          maxItems: 2
        nearestDistance:
          type: number
        noNearbyRoad:
          type: boolean
        createdAt:
          type: string
          format: date-time
        user_id:
          type: string
          description: "作成ユーザーのFirebase UID"
      required:
        - position
        - type
        - description
        - dangerLevel
        - createdAt
        - user_id
    CreateObstacleRequest:
      type: object
      properties:
        position:
          type: array
          items:
            type: number
          description: "[latitude, longitude]"
          minItems: 2
          maxItems: 2
        type:
          $ref: "#/components/schemas/ObstacleType"
        description:
          type: string
        dangerLevel:
          $ref: "#/components/schemas/DangerLevel"
        nodes:
          type: array
          items:
            type: number
          description: "[latitude, longitude]"
          minItems: 2
          maxItems: 2
        nearestDistance:
          type: number
        noNearbyRoad:
          type: boolean
      required:
        - position
        - type
        - dangerLevel
    UpdateObstacleRequest:
      type: object
      properties:
        position:
          type: array
          items:
            type: number
          description: "[latitude, longitude]"
          minItems: 2
          maxItems: 2
        type:
          $ref: "#/components/schemas/ObstacleType"
        description:
          type: string
        dangerLevel:
          $ref: "#/components/schemas/DangerLevel"
        nodes:
          type: array
          items:
            type: number
          description: "[latitude, longitude]"
          minItems: 2
          maxItems: 2
        nearestDistance:
          type: number
        noNearbyRoad:
          type: boolean
      required:
        - position
        - type
        - dangerLevel
    ListObstacleResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Obstacle"
    RouteWithObstaclesRequest:
      type: object
      properties:
        locations:
          type: array
          items:
            type: object
            properties:
              lat:
                type: number
              lon:
                type: number
            required:
              - lat
              - lon
          minItems: 2
        waypoints:
          type: array
          items:
            type: object
            properties:
              lat:
                type: number
              lon:
                type: number
            required:
              - lat
              - lon
          description: "中継地点のリスト"
        exclude_locations:
          type: array
          items:
            type: object
            properties:
              lat:
                type: number
              lon:
                type: number
            required:
              - lat
              - lon
          description: "回避地点のリスト"
        language:
          type: string
          default: "ja-JP"
        costing:
          type: string
          default: "auto"
        detection_method:
          type: string
          enum: ["nodes", "distance", "both"]
          default: "distance"
          description: "障害物検出方法: nodes(ノード一致), distance(距離判定), both(両方)"
        distance_threshold:
          type: number
          default: 0.5
          minimum: 0.1
          maximum: 10.0
          description: "距離判定の閾値（キロメートル）"
      required:
        - locations
    ValhallaRouteResponse:
      type: object
      properties:
        trip:
          $ref: "#/components/schemas/Trip"
        alternates:
          type: array
          items:
            type: object
            properties:
              trip:
                $ref: "#/components/schemas/Trip"
        admins:
          type: array
          items:
            type: object
        units:
          type: string
        language:
          type: string
    Trip:
      type: object
      properties:
        locations:
          type: array
          items:
            type: object
        legs:
          type: array
          items:
            type: object
        summary:
          type: object
        status_message:
          type: string
        status:
          type: integer
        units:
          type: string
        language:
          type: string
        obstacles:
          type: array
          items:
            $ref: "#/components/schemas/Obstacle"
    Empty:
      type: object
    TsunamiSafetyLevel:
      type: integer
      enum: [1, 2, 3, 4, 5]
      description: |
        Enum representing different tsunami safety levels:
        * 1 - VERY_LOW
        * 2 - LOW
        * 3 - MEDIUM
        * 4 - HIGH
        * 5 - VERY_HIGH
    Shelter:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        lat:
          type: number
          description: "Latitude"
        lon:
          type: number
          description: "Longitude"
        address:
          type: string
        elevation:
          type: number
          description: "Elevation in meters"
        tsunami_safety_level:
          $ref: "#/components/schemas/TsunamiSafetyLevel"
        created_at:
          type: string
          format: date-time
        user_id:
          type: string
          description: "作成ユーザーのFirebase UID"
      required:
        - id
        - name
        - lat
        - lon
        - address
        - elevation
        - tsunami_safety_level
        - created_at
        - user_id
    CreateShelterRequest:
      type: object
      properties:
        name:
          type: string
        lat:
          type: number
          description: "Latitude"
        lon:
          type: number
          description: "Longitude"
        address:
          type: string
        elevation:
          type: number
          description: "Elevation in meters"
        tsunami_safety_level:
          $ref: "#/components/schemas/TsunamiSafetyLevel"
      required:
        - name
        - lat
        - lon
        - address
        - elevation
        - tsunami_safety_level
    UpdateShelterRequest:
      type: object
      properties:
        name:
          type: string
        lat:
          type: number
          description: "Latitude"
        lon:
          type: number
          description: "Longitude"
        address:
          type: string
        elevation:
          type: number
          description: "Elevation in meters"
        tsunami_safety_level:
          $ref: "#/components/schemas/TsunamiSafetyLevel"
      required:
        - name
        - lat
        - lon
        - address
        - elevation
        - tsunami_safety_level
    ListShelterResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Shelter"
    EvacuationLevel:
      type: integer
      enum: [1, 2, 3, 4, 5]
      description: |
        Enum representing different evacuation ability levels:
        * 1 - VERY_LOW (要介護レベル)
        * 2 - LOW (歩行困難)
        * 3 - MEDIUM (標準的な避難能力)
        * 4 - HIGH (健康で機敏)
        * 5 - VERY_HIGH (専門的な避難支援能力あり)
    User:
      type: object
      properties:
        firebase_uid:
          type: string
        username:
          type: string
        age:
          type: integer
          minimum: 1
          maximum: 120
        gender:
          type: string
          enum: ["male", "female", "other"]
        has_disability:
          type: boolean
        evacuation_level:
          $ref: "#/components/schemas/EvacuationLevel"
        is_firebase_deleted:
          type: boolean
          description: "Firebase認証データが削除されているかどうか"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        role:
          type: string
          enum: [admin, editor, none]
          default: none
          description: "ユーザー権限"
      required:
        - firebase_uid
        - username
        - age
        - gender
        - has_disability
        - evacuation_level
        - is_firebase_deleted
        - created_at
        - updated_at
        - role
    CreateUserRequest:
      type: object
      properties:
        username:
          type: string
        age:
          type: integer
          minimum: 1
          maximum: 120
        gender:
          type: string
          enum: ["male", "female", "other"]
        has_disability:
          type: boolean
        evacuation_level:
          $ref: "#/components/schemas/EvacuationLevel"
      required:
        - username
        - age
        - gender
        - evacuation_level
    UpdateUserRequest:
      type: object
      properties:
        username:
          type: string
        age:
          type: integer
          minimum: 1
          maximum: 120
        gender:
          type: string
          enum: ["male", "female", "other"]
        has_disability:
          type: boolean
        evacuation_level:
          $ref: "#/components/schemas/EvacuationLevel"
      required:
        - username
        - age
        - gender
        - evacuation_level
    WalkedRoute:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        shape:
          type: string
        obstacles:
          type: array
          items:
            type: object
        route_summary:
          type: object
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        duration:
          type: integer
        distance:
          type: number
        trace_raw:
          type: array
          items:
            type: array
            items:
              type: number
        title:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
  securitySchemes:
    firebase:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Firebase ID Token
